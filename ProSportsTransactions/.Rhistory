x.4 <- runif(1000)
hist(x.4)
plot.ecdf(x.4)
abline(a=0, b=1, col=2)
head(x.4)
hist(x.4)
plot.ecdf(x.4)
abline(a=0, b=1, col=2)
x.5 <- runif(1000)
x.6 <- runif(1000)
x.7 = x.5 + x.6
hist(x.7)
plot.ecdf(x.7)
plot.ecdf(x.4)
plot.ecdf(x.7)
mean(runif(10000, min = 1, max = 6))
x <- runif(1000)# make a sample from U(0,1)
y <- x[x<0.5] # keep only observations < 0.5
z<- x[x>= 0.5] # keep only observations >= 0.5
head(x)
head(y)
head(z)
plot.ecdf(x)
plot.ecdf(y)
plot.ecdf(z)
par(mfrow=c(2,2))
hist(rexp(10))
hist(rexp(100))
hist(rexp(1000))
hist(rexp(10000))
par(mfrow=c(3,2))
hist(rexp(10))
hist(rexp(100))
hist(rexp(1000))
hist(rexp(10000))
hist(rexp(100000))
hist(rexp(1000000))
library(ggplot2)
x_lower <- 0
x_upper <- 5
max_height2 <- max(dexp(x_lower:x_upper, rate = 1, log = FALSE), dexp(x_lower:x_upper, rate = 2, log = FALSE),
dexp(x_lower:x_upper, rate = 0.5, log = FALSE))
max_height2
x_lower <- 0
x_upper <- 5
max_height2 <- max(dexp(x_lower:x_upper, rate = 1, log = FALSE), dexp(x_lower:x_upper, rate = 2, log = FALSE),
dexp(x_lower:x_upper, rate = 0.5, log = FALSE))
max_height2
ggplot(data.frame(x = c(x_lower, x_upper)), aes(x = x)) + xlim(x_lower, x_upper) +
ylim(0, max_height2) +
stat_function(fun = dexp, args = list(rate = 0.5), aes(colour = "0.5")) +
stat_function(fun = dexp, args = list(rate = 1), aes(colour = "1")) +
stat_function(fun = dexp, args = list(rate = 2), aes(colour = "2")) +
scale_color_manual("Rate", values = c("blue", "green", "red")) +
labs(x = "\n x", y = "f(x) \n",
title = "Exponential Distribution Density Plots \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
legend.title = element_text(face="bold", size = 10),
legend.position = "top")
?dexp
ggplot(data.frame(x = c(x_lower, x_upper)), aes(x = x)) + xlim(x_lower, x_upper) +
ylim(0, max_height2) +
stat_function(fun = dexp, args = list(rate = 0.5), aes(colour = "0.5")) +
stat_function(fun = dexp, args = list(rate = 1), aes(colour = "1")) +
stat_function(fun = dexp, args = list(rate = 2), aes(colour = "2")) +
scale_color_manual("Rate", values = c("blue", "green", "red")) +
labs(x = "\n x", y = "f(x) \n",
title = "Exponential Distribution Density Plots \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
legend.title = element_text(face="bold", size = 10),
legend.position = "top")
ggplot(data.frame(x = c(x_lower, x_upper)), aes(x = x)) + xlim(x_lower, x_upper) +
ylim(0, max_height2) +
stat_function(fun = dexp, args = list(rate = 0.5), aes(colour = "0.5")) +
stat_function(fun = dexp, args = list(rate = 1), aes(colour = "1")) +
stat_function(fun = dexp, args = list(rate = 5), aes(colour = "2")) +
scale_color_manual("Rate", values = c("blue", "green", "red")) +
labs(x = "\n x", y = "f(x) \n",
title = "Exponential Distribution Density Plots \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
legend.title = element_text(face="bold", size = 10),
legend.position = "top")
ggplot(data.frame(x = c(x_lower, x_upper)), aes(x = x)) + xlim(x_lower, x_upper) +
ylim(0, max_height2) +
stat_function(fun = dexp, args = list(rate = 0.5), aes(colour = "0.5")) +
stat_function(fun = dexp, args = list(rate = 1), aes(colour = "1")) +
stat_function(fun = dexp, args = list(rate = 2), aes(colour = "2")) +
scale_color_manual("Rate", values = c("blue", "green", "red")) +
labs(x = "\n x", y = "f(x) \n",
title = "Exponential Distribution Density Plots \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
legend.title = element_text(face="bold", size = 10),
legend.position = "top")
x <- rexp(10000,2)
y <- x[x>2]
cdf.x <- ecdf(x)
cdf.y <- ecdf(y)
cdf.y.2 <- ecdf(y-2)
t <- seq(0,5,by = .01)
plot(t,cdf.x(t), type = 'l', lwd = 2)
lines(t,cdf.y(t), col = 2)
lines(t,cdf.y.2(t), col = 4)
legend(c("X", "Y = X|X>2", "Y-2"), fill = c(1,2,4), x = 'bottomright')
par(mfrow=c(1,1))
y <- x[x>2]
cdf.x <- ecdf(x)
cdf.y <- ecdf(y)
cdf.y.2 <- ecdf(y-2)
t <- seq(0,5,by = .01)
plot(t,cdf.x(t), type = 'l', lwd = 2)
lines(t,cdf.y(t), col = 2)
lines(t,cdf.y.2(t), col = 4)
legend(c("X", "Y = X|X>2", "Y-2"), fill = c(1,2,4), x = 'bottomright')
y=rnorm(100)
mean(y)
y=rnorm(100)
mean(y)
y=rnorm(100)
mean(y)
y=rnorm(100)
mean(y)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
y
cor(x,y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis", main="Plot of X vs Y")
x_1 <- rnorm(1000)
x_2 <- rnorm(1000)
hist(x_1)
x_1 <- runif(1000)
x_2 <- runif(1000)
hist(x_1)
hist(x_2)
hist(x_1+x_2)
hist(x_1*x_2)
hist(max(x_1, x_2))
x_max <- max(x_1, x_2)
x_max <- lapply(max(x_1, x_2))
?lapply
x_max <- lapply(x_1, FUN = max(x_1, x_2))
hist(min(x_1, x_2))
hist(max(x_1, x_2*10))
x_df <- data.frame(x_1, x_2)
View(x_df)
hist(max(x_df))
max(x_df)
x_df$max <- apply(x_df, 1, function(x) max(x))
x_df
hist(max(x_df$max))
hist(x_df$max)
hist(max(x_1, x_2))
max(x_1, x_2)
hist(apply(x_df, 1, function(x) max(x)))
hist(apply(data.frame(x_1, x_2), 1, function(x) max(x)))
x_df$min <- apply(x_df, 1, function(x) min(x))
hist(x_df$min)
hist(1-x_1)
u <- 50
s <- 2
?rnorm
x <- rnorm(1000000, mean = u, sd = s)
u <- 50
s <- 2
a <- 5
b <- 10
x <- rnorm(1000000, mean = u, sd = s)
y <- a*x + b
a * u + b == mean(y)
mean(y)
a * u + b
a**2 * s**2 == var(y)
a**2 * s**2
var(y)
hist(x_1*x_2)
hist(x_df$max)
lin_transform_sim <- function(u, s, a, b) {
x <- rnorm(1000000, mean = u, sd = s)
y <- a*x + b
cat('a * u + b: ', a * u + b, '\n')
cat('mean(y): ', mean(y), '\n')
cat('a**2 * s**2: ', a**2 * s**2, '\n')
cat('var(y): ', var(y), '\n')
return(abs(a * u + b - mean(y)) <= 0.1*mean(y) & abs(a**2 * s**2 - var(y)) <= 0.1*var(y)) # within 10% -- could probably change this to be lower, but for smaller simulation samples it should work fine
}
lin_transform_sim(50, 2, 5, 10)
(lin_transform_sim(runif(4, min=0, max=100)))
(lin_transform_sim(runif(min=0, max=100), runif(min=0, max=100), runif(min=0, max=100), runif(min=0, max=100)))
(lin_transform_sim(runif(1, min=0, max=100), runif(1, min=0, max=100), runif(1, min=0, max=100), runif(1, min=0, max=100)))
u = runif(6, min=0, max=100)
s = runif(6, min=0, max=100)
x_i <- replicate(6, runif(1, min=0, max=100))
x_i <- replicate(6, runif(10, min=0, max=100))
View(x_i)
View(x_i)
x_i[1][1]
x_i[1][2]
x_i[1][1]
x_i[[1]]
x_i[[2]]
x_i[[3]]
x_i[[1][3]]
str(x_i)
head(x_i)
sum(x_i[,1])
x_sum <- sum(x_i[,1:10])
?lapply
x_sum <- lapply([1:10], FUN = function(i) {sum(x_i[,i])})
x_sum <- lapply(1:10, FUN = function(i) {sum(x_i[,i])})
colSums(x_i)
x_sum <- colSums(x_i)
mean(x_sum)
(sum(u))
(mean(x_sum))
?dexp
x <- [1:100000]
y <- dexp(x, rate = 2)
x <- rexp(1000, rate = 2)
y <- x[x < 2]
y <- x[x > 2]
y_minus_2 <- y - 2
plot(ecdf(y))
plot(ecdf(y_minus_2))
plot(ecdf(y))
lines(ecdf(y_minus_2))
hist(y)
hist(y_minus_2)
hist(y)
hist(y_minus_2)
hist(y)
x <- rexp(1000, rate = 2)
y <- x[x > 2]
hist(y)
x <- rexp(1000, rate = 2)
y <- x[x > 2]
hist(y)
x <- rexp(10000000, rate = 2)
y <- x[x > 2]
hist(y)
x <- rexp(10000000, rate = 2)
y <- x[x > 2]
hist(y)
install.packages('MASS')
library(MASS)
fit_exp <- fitdistr(y, "exponential")
ks.test(y, "pexp", fit_exp$estimate)
plot(ecdf(y))
plot(ecdf(y))
x <- rexp(100000, rate = 2)
y <- x[x > 2]
hist(y)
plot(ecdf(y))
lines(ecdf(y_minus_2))
plot(ecdf(y))
lines(ecdf(y_minus_2))
lines(ecdf(x))
plot(ecdf(x))
lines(ecdf(y_minus_2))
lines(ecdf(y))
x <- rexp(100000, rate = 2)
y <- x[x > 2]
hist(y)
y_minus_2 <- y - 2
plot(ecdf(x))
lines(ecdf(y_minus_2))
lines(ecdf(y))
plot(ecdf(x), colors = c("red"))
plot(ecdf(x), col = c(1,2,3))
lines(ecdf(y_minus_2))
lines(ecdf(y))
plot(ecdf(x), col = 1)
lines(ecdf(y_minus_2), col = 2)
lines(ecdf(y), col = 3)
y <- rnorm(100000, mean = 0, sd = 1)
x <- floor(y)
setwd("~/School/ANLY 511/Final Project")
setwd("~/School/ANLY 511/Final Project/ProSportsTransactions")
?httr
knitr::opts_chunk$set(echo = TRUE)
library(httr)
r <- GET("https://www.prosportstransactions.com/")
View(r)
r <- GET("https://www.prosportstransactions.com/")
(str(content(r)))
r <- GET("https://www.prosportstransactions.com/")
(str(content(r, "text")))
r <- GET("https://www.prosportstransactions.com/")
(str(content(r, "text", encoding = "ISO-8859-1")))
